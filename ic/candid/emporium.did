type InitArgs = record {
  cap_canister : opt principal;
  custodians : opt vec principal;
  nft_canister : opt principal;
};
type Metadata = record {
  fee : nat;
  decimals : nat8;
  owner : principal;
  logo : text;
  name : text;
  totalSupply : nat;
  symbol : text;
};
type Result = variant { Ok : nat; Err : TxError };
type Result_1 = variant { Ok : text; Err : text };
type Result_2 = variant { Ok; Err : text };
type StreakData = record { streak : nat64; last_timestamp : nat64 };
type TokenInfo = record {
  holderNumber : nat64;
  deployTime : nat64;
  metadata : Metadata;
  historySize : nat64;
  cycles : nat64;
  feeTo : principal;
};
type TxError = variant {
  InsufficientAllowance;
  InsufficientBalance;
  ErrorOperationStyle;
  Unauthorized;
  LedgerTrap;
  ErrorTo;
  Other : text;
  BlockUsed;
  AmountTooSmall;
};
type User = record {
  "principal" : principal;
  total_rewards : nat64;
  work : StreakData;
  discord_id : text;
  daily : StreakData;
};
service : (opt InitArgs) -> {
  allowance : (principal, principal) -> (nat) query;
  approve : (principal, nat) -> (Result);
  balanceOf : (principal) -> (nat) query;
  daily : (text) -> (Result_1);
  decimals : () -> (nat8) query;
  dfxInfo : () -> (text) query;
  getAllowanceSize : () -> (nat64) query;
  getHolders : (nat64, nat64) -> (vec record { principal; nat }) query;
  getMetadata : () -> (Metadata) query;
  getTokenInfo : () -> (TokenInfo) query;
  getUserApprovals : (principal) -> (vec record { principal; nat }) query;
  get_user : (text) -> (opt User);
  get_users : () -> (vec User);
  gitCommitHash : () -> (text) query;
  historySize : () -> (nat64) query;
  logo : () -> (text) query;
  mint : (principal, nat) -> (Result);
  name : () -> (text) query;
  owner : () -> (principal) query;
  register : (text) -> (Result_1);
  rustToolchainInfo : () -> (text) query;
  setFee : (nat) -> ();
  setFeeTo : (principal) -> ();
  setLogo : (text) -> ();
  setName : (text) -> ();
  set_principal : (text, principal) -> (Result_2);
  symbol : () -> (text) query;
  totalSupply : () -> (nat) query;
  transfer : (principal, nat) -> (Result);
  transferFrom : (principal, principal, nat) -> (Result);
  work : (text) -> (Result_1);
}